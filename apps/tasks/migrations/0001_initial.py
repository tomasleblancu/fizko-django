# Generated by Django 4.2.11 on 2025-08-31 16:03

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("manual", "Manual"),
                            ("automatic", "Automática"),
                            ("scheduled", "Programada"),
                            ("recurring", "Recurrente"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                ("company_rut", models.CharField(blank=True, max_length=12)),
                ("company_dv", models.CharField(blank=True, max_length=1)),
                (
                    "assigned_to",
                    models.CharField(
                        blank=True,
                        help_text="Email del usuario asignado",
                        max_length=255,
                    ),
                ),
                (
                    "created_by",
                    models.CharField(
                        help_text="Email del usuario creador", max_length=255
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendiente"),
                            ("in_progress", "En Progreso"),
                            ("completed", "Completada"),
                            ("cancelled", "Cancelada"),
                            ("failed", "Fallida"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Baja"),
                            ("normal", "Normal"),
                            ("high", "Alta"),
                            ("urgent", "Urgente"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "progress_percentage",
                    models.IntegerField(
                        default=0, help_text="Porcentaje de progreso 0-100"
                    ),
                ),
                ("estimated_duration", models.DurationField(blank=True, null=True)),
                ("actual_duration", models.DurationField(blank=True, null=True)),
                (
                    "task_data",
                    models.JSONField(
                        default=dict, help_text="Datos específicos de la tarea"
                    ),
                ),
                (
                    "result_data",
                    models.JSONField(
                        default=dict, help_text="Resultados de la ejecución"
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "recurrence_pattern",
                    models.JSONField(default=dict, help_text="Patrón de recurrencia"),
                ),
                ("next_run", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Task",
                "verbose_name_plural": "Tasks",
                "db_table": "tasks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "color",
                    models.CharField(
                        default="#007bff", help_text="Color hexadecimal", max_length=7
                    ),
                ),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Task Category",
                "verbose_name_plural": "Task Categories",
                "db_table": "task_categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TaskSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("once", "Una vez"),
                            ("daily", "Diario"),
                            ("weekly", "Semanal"),
                            ("monthly", "Mensual"),
                            ("yearly", "Anual"),
                            ("cron", "Expresión Cron"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "schedule_expression",
                    models.CharField(
                        help_text="Expresión de programación", max_length=100
                    ),
                ),
                (
                    "task_template",
                    models.JSONField(help_text="Plantilla de la tarea a crear"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("run_count", models.IntegerField(default=0)),
                (
                    "max_runs",
                    models.IntegerField(
                        blank=True, help_text="Máximo número de ejecuciones", null=True
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True, help_text="Fecha de finalización", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Schedule",
                "verbose_name_plural": "Task Schedules",
                "db_table": "task_schedules",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TaskComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("user_email", models.EmailField(max_length=254)),
                ("comment", models.TextField()),
                (
                    "is_internal",
                    models.BooleanField(
                        default=False, help_text="Solo visible para el equipo interno"
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="tasks.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Comment",
                "verbose_name_plural": "Task Comments",
                "db_table": "task_comments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("file", models.FileField(upload_to="tasks/attachments/")),
                ("filename", models.CharField(max_length=255)),
                ("file_size", models.BigIntegerField(help_text="Tamaño en bytes")),
                ("content_type", models.CharField(max_length=100)),
                ("uploaded_by", models.EmailField(max_length=254)),
                ("description", models.TextField(blank=True)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="tasks.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Attachment",
                "verbose_name_plural": "Task Attachments",
                "db_table": "task_attachments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="task",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="tasks.taskcategory",
            ),
        ),
        migrations.CreateModel(
            name="TaskLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("debug", "Debug"),
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        default="info",
                        max_length=10,
                    ),
                ),
                ("message", models.TextField()),
                (
                    "details",
                    models.JSONField(default=dict, help_text="Detalles adicionales"),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="tasks.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Log",
                "verbose_name_plural": "Task Logs",
                "db_table": "task_logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["task", "level"], name="task_logs_task_id_8914fc_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="task_logs_created_01686a_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TaskDependency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dependency_type",
                    models.CharField(
                        choices=[
                            ("finish_to_start", "Finalizar para Iniciar"),
                            ("start_to_start", "Iniciar para Iniciar"),
                            ("finish_to_finish", "Finalizar para Finalizar"),
                            ("start_to_finish", "Iniciar para Finalizar"),
                        ],
                        default="finish_to_start",
                        max_length=20,
                    ),
                ),
                (
                    "lag_days",
                    models.IntegerField(
                        default=0, help_text="Días de retraso/adelanto"
                    ),
                ),
                (
                    "predecessor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="successor_dependencies",
                        to="tasks.task",
                    ),
                ),
                (
                    "successor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predecessor_dependencies",
                        to="tasks.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Dependency",
                "verbose_name_plural": "Task Dependencies",
                "db_table": "task_dependencies",
                "unique_together": {("predecessor", "successor")},
            },
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["company_rut", "company_dv"], name="tasks_company_80a740_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["assigned_to"], name="tasks_assigne_230082_idx"),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["status", "priority"], name="tasks_status_0fbdac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["due_date"], name="tasks_due_dat_0359a9_idx"),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["task_type"], name="tasks_task_ty_7bc323_idx"),
        ),
    ]
