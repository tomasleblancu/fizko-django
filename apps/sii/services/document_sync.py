"""
Servicio para sincronizaci√≥n de documentos SII
"""
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Any, List, Optional

from django.db import transaction
from django.utils import timezone

from apps.companies.models import Company
from apps.taxpayers.models import TaxpayerSiiCredentials
from ..rpa.api_integration import SIIIntegratedService
from ..models import SIISyncLog

logger = logging.getLogger(__name__)


class DocumentSyncService:
    """
    Servicio para sincronizaci√≥n de documentos desde el SII.
    Encapsula toda la l√≥gica de negocio para la sincronizaci√≥n.
    """
    
    def __init__(self, company_rut: str, company_dv: str):
        """
        Inicializa el servicio de sincronizaci√≥n.
        
        Args:
            company_rut: RUT de la empresa sin d√≠gito verificador
            company_dv: D√≠gito verificador de la empresa
        """
        self.company_rut = company_rut
        self.company_dv = company_dv
        self.full_rut = f"{company_rut}-{company_dv}"
        self.company = None
        self.credentials = None
        
        # Inicializar empresa y credenciales
        self._initialize()
    
    def _initialize(self):
        """Inicializa la empresa y credenciales"""
        self.company = self._get_company()
        self.credentials = self._get_credentials()
        
    def _get_company(self) -> Company:
        """
        Obtiene la empresa de la base de datos.
        
        Returns:
            Company: Instancia de la empresa
            
        Raises:
            ValueError: Si la empresa no existe
        """
        try:
            return Company.objects.get(tax_id=self.full_rut)
        except Company.DoesNotExist:
            raise ValueError(f"Empresa con RUT {self.full_rut} no encontrada")
    
    def _get_credentials(self) -> TaxpayerSiiCredentials:
        """
        Obtiene las credenciales SII de la empresa.
        
        Returns:
            TaxpayerSiiCredentials: Credenciales de la empresa
            
        Raises:
            ValueError: Si no existen credenciales
        """
        try:
            return TaxpayerSiiCredentials.objects.get(company=self.company)
        except TaxpayerSiiCredentials.DoesNotExist:
            raise ValueError(f"Credenciales SII no encontradas para empresa {self.full_rut}")
    
    def sync_period(
        self, 
        fecha_desde: str, 
        fecha_hasta: str,
        sync_log: SIISyncLog,
        task_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Sincroniza documentos para un per√≠odo espec√≠fico.
        
        Args:
            fecha_desde: Fecha inicio en formato YYYY-MM-DD
            fecha_hasta: Fecha fin en formato YYYY-MM-DD
            sync_log: Log de sincronizaci√≥n para actualizar
            task_id: ID de la tarea de Celery (opcional)
            
        Returns:
            Dict con los resultados de la sincronizaci√≥n
            
        Raises:
            ValueError: Si las fechas son inv√°lidas
        """
        # Validar fechas
        self._validate_dates(fecha_desde, fecha_hasta)
        
        logger.info(f"üöÄ Iniciando sincronizaci√≥n para {self.full_rut}")
        logger.info(f"   Per√≠odo: {fecha_desde} a {fecha_hasta}")
        
        # Obtener per√≠odos tributarios
        periodos = self._get_periodos_from_dates(fecha_desde, fecha_hasta)
        logger.info(f"üìÖ Per√≠odos a procesar: {periodos}")
        
        all_dtes = []
        sii_password = self.credentials.get_password()
        
        # Usar servicio integrado SII
        with SIIIntegratedService(
            tax_id=self.full_rut, 
            password=sii_password, 
            headless=True
        ) as sii_service:
            logger.info(f"‚úÖ Servicio SII integrado creado para {self.full_rut}")
            
            # Procesar cada per√≠odo
            for periodo in periodos:
                logger.info(f"üìÖ Procesando per√≠odo {periodo}")
                
                # Extraer documentos del per√≠odo
                dtes_periodo = self._extract_periodo_documents(
                    sii_service, 
                    periodo, 
                    task_id
                )
                all_dtes.extend(dtes_periodo)
        
        logger.info(f"üéØ Extracci√≥n completada: {len(all_dtes)} documentos totales")
        
        # Procesar y almacenar DTEs
        from .dte_processor import DTEProcessor
        processor = DTEProcessor(self.company)
        results = processor.process_batch(all_dtes, sync_log)
        
        logger.info(f"‚úÖ Procesamiento completado: {results['created']} creados, {results['updated']} actualizados")
        
        return results
    
    def sync_full_history(
        self,
        sync_log: SIISyncLog,
        task_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Sincroniza todo el historial de documentos desde el inicio de actividades.
        
        Args:
            sync_log: Log de sincronizaci√≥n para actualizar
            task_id: ID de la tarea de Celery (opcional)
            
        Returns:
            Dict con los resultados de la sincronizaci√≥n
        """
        # Determinar fecha de inicio
        fecha_inicio = self._get_fecha_inicio_actividades()
        fecha_hasta = date.today()
        
        logger.info(f"üöÄ Iniciando sincronizaci√≥n COMPLETA para {self.full_rut}")
        logger.info(f"   Per√≠odo: {fecha_inicio} a {fecha_hasta}")
        
        # Obtener todos los per√≠odos
        periodos = self._get_periodos_from_dates(
            fecha_inicio.isoformat(),
            fecha_hasta.isoformat()
        )
        
        total_periodos = len(periodos)
        logger.info(f"üìÖ Per√≠odos a procesar: {total_periodos} ({periodos[0]} - {periodos[-1]})")
        
        all_dtes = []
        processed_periodos = 0
        sii_password = self.credentials.get_password()
        
        # Procesar y almacenar resultados parciales
        from .dte_processor import DTEProcessor
        processor = DTEProcessor(self.company)
        
        total_results = {
            'processed': 0,
            'created': 0,
            'updated': 0,
            'errors': 0,
            'error_details': []
        }
        
        with SIIIntegratedService(
            tax_id=self.full_rut,
            password=sii_password,
            headless=True
        ) as sii_service:
            logger.info(f"‚úÖ Servicio SII integrado creado")
            
            for i, periodo in enumerate(periodos, 1):
                logger.info(f"üìÖ Procesando per√≠odo {periodo} ({i}/{total_periodos})")
                
                # Actualizar progreso cada 10 per√≠odos
                if i % 10 == 0:
                    self._update_sync_progress(sync_log, i, total_periodos)
                
                # Extraer documentos del per√≠odo
                dtes_periodo = self._extract_periodo_documents(
                    sii_service,
                    periodo,
                    task_id
                )
                all_dtes.extend(dtes_periodo)
                processed_periodos += 1
                
                # Procesar en lotes para evitar consumir mucha memoria
                if len(all_dtes) >= 1000:
                    logger.info(f"üìä Procesando lote de {len(all_dtes)} documentos...")
                    batch_results = processor.process_batch(all_dtes, sync_log)
                    
                    # Acumular resultados
                    self._accumulate_results(total_results, batch_results)
                    
                    # Actualizar log con resultados parciales
                    self._update_sync_log_results(sync_log, total_results)
                    
                    logger.info(f"‚úÖ Lote procesado: {batch_results['created']} creados, {batch_results['updated']} actualizados")
                    all_dtes = []  # Limpiar lista para siguiente lote
        
        # Procesar DTEs finales si quedan
        if all_dtes:
            logger.info(f"üìä Procesando √∫ltimo lote de {len(all_dtes)} documentos...")
            final_results = processor.process_batch(all_dtes, sync_log)
            self._accumulate_results(total_results, final_results)
        
        logger.info(f"üéâ Sincronizaci√≥n COMPLETA exitosa")
        logger.info(f"   Per√≠odos procesados: {processed_periodos}")
        logger.info(f"   Documentos procesados: {total_results['processed']}")
        logger.info(f"   Documentos creados: {total_results['created']}")
        logger.info(f"   Documentos actualizados: {total_results['updated']}")
        logger.info(f"   Errores: {total_results['errors']}")
        
        return {
            'periods_processed': processed_periodos,
            **total_results
        }
    
    def _extract_periodo_documents(
        self, 
        sii_service: SIIIntegratedService,
        periodo: str,
        task_id: Optional[str] = None
    ) -> List[Dict]:
        """
        Extrae documentos de un per√≠odo espec√≠fico.
        
        Args:
            sii_service: Servicio SII integrado
            periodo: Per√≠odo tributario (YYYYMM)
            task_id: ID de la tarea (opcional)
            
        Returns:
            Lista de DTEs extra√≠dos
        """
        dtes = []
        
        # Extraer documentos de compra
        dtes.extend(self._extract_compras(sii_service, periodo, task_id))
        
        # Extraer documentos de venta
        dtes.extend(self._extract_ventas(sii_service, periodo, task_id))
        
        return dtes
    
    def _extract_compras(
        self,
        sii_service: SIIIntegratedService, 
        periodo: str,
        task_id: Optional[str]
    ) -> List[Dict]:
        """
        Extrae documentos de compra (recibidos) de un per√≠odo.
        Primero obtiene el resumen para identificar tipos de documentos disponibles.
        
        Args:
            sii_service: Servicio SII integrado
            periodo: Per√≠odo tributario (YYYYMM)
            task_id: ID de la tarea (opcional)
            
        Returns:
            Lista de documentos de compra
        """
        try:
            logger.info(f"üì• Extrayendo documentos de compra per√≠odo {periodo}")
            
            # Primero obtener resumen para identificar tipos de documentos
            logger.info(f"üìä Obteniendo resumen de compras para identificar tipos de documentos...")
            resumen = sii_service.get_resumen_compras_ventas(periodo)
            
            all_docs = []
            
            if resumen.get('status') == 'success' and resumen.get('compras'):
                compras_data = resumen['compras'].get('data', [])
                
                # Identificar tipos de documentos con datos
                tipos_con_datos = []
                if isinstance(compras_data, list):
                    for item in compras_data:
                        if isinstance(item, dict):
                            tipo_codigo = str(item.get('rsmnTipoDocInteger', ''))
                            cantidad = item.get('rsmnTotDoc', 0)
                            nombre = item.get('dcvNombreTipoDoc', f'Tipo {tipo_codigo}')
                            if tipo_codigo and cantidad > 0:
                                tipos_con_datos.append(tipo_codigo)
                                logger.info(f"   Tipo {tipo_codigo} ({nombre}): {cantidad} documentos")
                
                # Si no hay tipos identificados, intentar con los comunes
                if not tipos_con_datos:
                    logger.info("   No se encontraron tipos en resumen, intentando con tipos comunes...")
                    tipos_con_datos = ['33', '34', '46', '56', '61']  # Facturas, NC, ND, Factura Compra
                
                # Extraer documentos para cada tipo
                for cod_tipo in tipos_con_datos:
                    logger.info(f"   üìÑ Extrayendo documentos tipo {cod_tipo}...")
                    result = sii_service.get_documentos_compra(periodo, cod_tipo_doc=cod_tipo)
                    
                    if result.get('status') == 'success':
                        docs = result.get('data', [])
                        if docs:
                            logger.info(f"      ‚úÖ {len(docs)} documentos tipo {cod_tipo} extra√≠dos")
                            # Agregar metadatos
                            for doc in docs:
                                doc['tipo_operacion'] = 'recibidos'
                                doc['company_rut'] = self.full_rut
                                doc['extraction_task_id'] = task_id
                                doc['periodo_tributario'] = periodo
                            all_docs.extend(docs)
            else:
                # Si falla el resumen, intentar con tipo 33 por defecto
                logger.warning(f"‚ö†Ô∏è No se pudo obtener resumen, extrayendo tipo 33 por defecto")
                result = sii_service.get_documentos_compra(periodo)
                if result.get('status') == 'success':
                    docs = result.get('data', [])
                    for doc in docs:
                        doc['tipo_operacion'] = 'recibidos'
                        doc['company_rut'] = self.full_rut
                        doc['extraction_task_id'] = task_id
                        doc['periodo_tributario'] = periodo
                    all_docs.extend(docs)
            
            logger.info(f"‚úÖ Total documentos de compra extra√≠dos: {len(all_docs)}")
            return all_docs
                
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo documentos de compra per√≠odo {periodo}: {str(e)}")
            return []
    
    def _create_synthetic_document_type_48(
        self,
        resumen_item: Dict,
        periodo: str,
        task_id: Optional[str]
    ) -> Dict:
        """
        Crea un documento sint√©tico para tipo 48 (Comprobante de pago electr√≥nico).
        En lugar de extraer documentos individuales, usa los datos del resumen.

        Args:
            resumen_item: Item del resumen que contiene los datos agregados
            periodo: Per√≠odo tributario (YYYYMM)
            task_id: ID de la tarea (opcional)

        Returns:
            Dict con el documento sint√©tico
        """
        from datetime import datetime

        # Convertir per√≠odo a fecha (primer d√≠a del mes)
        a√±o = int(periodo[:4])
        mes = int(periodo[4:6])
        fecha_periodo = datetime(a√±o, mes, 1).date().isoformat()

        # Extraer datos del resumen
        total_amount = resumen_item.get('rsmnMntTotal', 0)
        cantidad_docs = resumen_item.get('rsmnTotDoc', 0)
        nombre_tipo = resumen_item.get('dcvNombreTipoDoc', 'Comprobante de pago electr√≥nico')

        logger.info(f"   üìÑ Creando documento sint√©tico tipo 48 para per√≠odo {periodo}")
        logger.info(f"      Total: ${total_amount:,.0f}, Cantidad: {cantidad_docs}")
        logger.info(f"      Resumen original: {resumen_item}")

        # Crear documento sint√©tico en formato RPA compatible
        doc_sintetico = {
            # Metadatos de extracci√≥n
            'tipo_operacion': 'emitidos',
            'company_rut': self.full_rut,
            'extraction_task_id': task_id,
            'periodo_tributario': periodo,
            'is_synthetic': True,

            # Campos en formato RPA (esperados por DTEValidator y DTEMapper)
            'folio': int(periodo),  # Campo requerido por validator
            'tipo_documento': '48',  # Campo esperado por RPA format
            'fecha_emision': fecha_periodo,  # Campo RPA
            'monto_total': total_amount,  # Campo RPA
            'monto_neto': 0,  # Campo RPA
            'monto_iva': 0,  # Campo RPA

            # Emisor (empresa actual) - formato RPA
            'rut_emisor': self.full_rut,  # Con formato XX.XXX.XXX-X
            'razon_social_emisor': self.company.name if self.company else f'Empresa {self.full_rut}',

            # Receptor gen√©rico - formato RPA
            'rut_receptor': '96790240-3',  # RUT gen√©rico SII con formato completo
            'razon_social_receptor': f'Comprobantes de Pago Electr√≥nicos - {nombre_tipo}',

            # Datos adicionales espec√≠ficos del resumen
            'quantity_docs': cantidad_docs,
            'xml_data': '',  # Vac√≠o para documentos sint√©ticos

            # Datos adicionales del resumen (raw_data esperado por mapper)
            'raw_data': {
                'original_resumen_item': resumen_item,
                'synthetic_type_48': True,
                'extraction_date': datetime.now().isoformat(),
                'periodo': periodo
            }
        }

        logger.info(f"      ‚úÖ Documento sint√©tico tipo 48 estructura completa creada")
        logger.debug(f"      üìã Estructura: {doc_sintetico}")
        return doc_sintetico

    def _create_synthetic_document_type_39(
        self,
        resumen_item: Dict,
        periodo: str,
        task_id: Optional[str]
    ) -> Dict:
        """
        Crea un documento sint√©tico para tipo 39 (Boleta Electr√≥nica).
        En lugar de extraer documentos individuales, usa los datos del resumen.

        Args:
            resumen_item: Item del resumen que contiene los datos agregados
            periodo: Per√≠odo tributario (YYYYMM)
            task_id: ID de la tarea (opcional)

        Returns:
            Dict con el documento sint√©tico
        """
        from datetime import datetime

        # Convertir per√≠odo a fecha (primer d√≠a del mes)
        a√±o = int(periodo[:4])
        mes = int(periodo[4:6])
        fecha_periodo = datetime(a√±o, mes, 1).date().isoformat()

        # Extraer datos del resumen
        total_amount = resumen_item.get('rsmnMntTotal', 0)
        cantidad_docs = resumen_item.get('rsmnTotDoc', 0)
        nombre_tipo = resumen_item.get('dcvNombreTipoDoc', 'Boleta Electr√≥nica')

        logger.info(f"   üìÑ Creando documento sint√©tico tipo 39 para per√≠odo {periodo}")
        logger.info(f"      Total: ${total_amount:,.0f}, Cantidad: {cantidad_docs}")

        # Crear documento sint√©tico en formato RPA compatible
        doc_sintetico = {
            # Metadatos de extracci√≥n
            'tipo_operacion': 'emitidos',
            'company_rut': self.full_rut,
            'extraction_task_id': task_id,
            'periodo_tributario': periodo,
            'is_synthetic': True,

            # Campos en formato RPA (esperados por DTEValidator y DTEMapper)
            'folio': int(periodo),  # Campo requerido por validator
            'tipo_documento': '39',  # Campo esperado por RPA format
            'fecha_emision': fecha_periodo,  # Campo RPA
            'monto_total': total_amount,  # Campo RPA
            'monto_neto': 0,  # Campo RPA (boletas suelen ser exentas/sin IVA desglosado)
            'monto_iva': 0,  # Campo RPA

            # Emisor (empresa actual) - formato RPA
            'rut_emisor': self.full_rut,  # Con formato XX.XXX.XXX-X
            'razon_social_emisor': self.company.name if self.company else f'Empresa {self.full_rut}',

            # Receptor gen√©rico - formato RPA
            'rut_receptor': '66666666-6',  # RUT gen√©rico para consumidor final
            'razon_social_receptor': f'Boletas Electr√≥nicas - {nombre_tipo}',

            # Datos adicionales espec√≠ficos del resumen
            'quantity_docs': cantidad_docs,
            'xml_data': '',  # Vac√≠o para documentos sint√©ticos

            # Datos adicionales del resumen (raw_data esperado por mapper)
            'raw_data': {
                'original_resumen_item': resumen_item,
                'synthetic_type_39': True,
                'extraction_date': datetime.now().isoformat(),
                'periodo': periodo
            }
        }

        return doc_sintetico

    def _extract_ventas(
        self,
        sii_service: SIIIntegratedService,
        periodo: str,
        task_id: Optional[str]
    ) -> List[Dict]:
        """
        Extrae documentos de venta (emitidos) de un per√≠odo.
        Primero obtiene el resumen para identificar tipos de documentos disponibles.
        
        Args:
            sii_service: Servicio SII integrado
            periodo: Per√≠odo tributario (YYYYMM)
            task_id: ID de la tarea (opcional)
            
        Returns:
            Lista de documentos de venta
        """
        try:
            logger.info(f"üì§ Extrayendo documentos de venta per√≠odo {periodo}")
            
            # Primero obtener resumen para identificar tipos de documentos
            logger.info(f"üìä Obteniendo resumen de ventas para identificar tipos de documentos...")
            resumen = sii_service.get_resumen_compras_ventas(periodo)
            
            all_docs = []
            
            if resumen.get('status') == 'success' and resumen.get('ventas'):
                ventas_data = resumen['ventas'].get('data', [])
                
                # Identificar tipos de documentos con datos
                tipos_con_datos = []
                resumen_items = {}  # Para almacenar items del resumen por tipo
                if isinstance(ventas_data, list):
                    for item in ventas_data:
                        if isinstance(item, dict):
                            tipo_codigo = str(item.get('rsmnTipoDocInteger', ''))
                            cantidad = item.get('rsmnTotDoc', 0)
                            nombre = item.get('dcvNombreTipoDoc', f'Tipo {tipo_codigo}')
                            if tipo_codigo and cantidad > 0:
                                tipos_con_datos.append(tipo_codigo)
                                resumen_items[tipo_codigo] = item  # Almacenar item completo
                                logger.info(f"   Tipo {tipo_codigo} ({nombre}): {cantidad} documentos")
                
                # Si no hay tipos identificados, intentar con los comunes
                if not tipos_con_datos:
                    logger.info("   No se encontraron tipos en resumen, intentando con tipos comunes...")
                    tipos_con_datos = ['33', '34', '39', '41', '52', '56', '61']  # Facturas, Boletas, GD, NC, ND
                    # Para tipos especiales sin resumen, no podemos crear documentos sint√©ticos
                    resumen_items = {}
                
                # Extraer documentos para cada tipo
                for cod_tipo in tipos_con_datos:
                    if cod_tipo == '48':
                        # Manejo especial para tipo 48 (Comprobante de pago electr√≥nico)
                        logger.info(f"   üìÑ Procesando tipo 48 (Comprobante de pago electr√≥nico) - usando resumen")
                        logger.info(f"      üîç Verificando resumen_items para tipo 48...")
                        logger.info(f"      üìä Claves disponibles en resumen: {list(resumen_items.keys())}")

                        if cod_tipo in resumen_items:
                            logger.info(f"      ‚úÖ Encontrado item en resumen para tipo 48")
                            doc_sintetico = self._create_synthetic_document_type_48(
                                resumen_items[cod_tipo],
                                periodo,
                                task_id
                            )
                            all_docs.append(doc_sintetico)
                            logger.info(f"      ‚úÖ Documento sint√©tico tipo 48 agregado a all_docs (total: {len(all_docs)})")
                        else:
                            logger.warning(f"      ‚ö†Ô∏è No se encontr√≥ item en resumen para tipo 48 - no se puede crear documento sint√©tico")
                            logger.warning(f"      üìä Tipos disponibles en resumen: {list(resumen_items.keys())}")
                    elif cod_tipo == '39':
                        # Manejo especial para tipo 39 (Boleta Electr√≥nica)
                        logger.info(f"   üìÑ Procesando tipo 39 (Boleta Electr√≥nica) - usando resumen")
                        if cod_tipo in resumen_items:
                            doc_sintetico = self._create_synthetic_document_type_39(
                                resumen_items[cod_tipo],
                                periodo,
                                task_id
                            )
                            all_docs.append(doc_sintetico)
                            logger.info(f"      ‚úÖ Documento sint√©tico tipo 39 creado")
                        else:
                            logger.warning(f"      ‚ö†Ô∏è No se encontr√≥ item en resumen para tipo 39 - no se puede crear documento sint√©tico")
                    else:
                        # Proceso normal para otros tipos
                        logger.info(f"   üìÑ Extrayendo documentos tipo {cod_tipo}...")
                        result = sii_service.get_documentos_venta(periodo, cod_tipo_doc=cod_tipo)

                        if result.get('status') == 'success':
                            docs = result.get('data', [])
                            if docs:
                                logger.info(f"      ‚úÖ {len(docs)} documentos tipo {cod_tipo} extra√≠dos")
                                # Agregar metadatos
                                for doc in docs:
                                    doc['tipo_operacion'] = 'emitidos'
                                    doc['company_rut'] = self.full_rut
                                    doc['extraction_task_id'] = task_id
                                    doc['periodo_tributario'] = periodo
                                all_docs.extend(docs)
                        else:
                            logger.warning(f"      ‚ö†Ô∏è No se pudieron extraer documentos tipo {cod_tipo}")
            else:
                # Si falla el resumen, intentar con tipo 33 por defecto
                logger.warning(f"‚ö†Ô∏è No se pudo obtener resumen, extrayendo tipo 33 por defecto")
                result = sii_service.get_documentos_venta(periodo)
                if result.get('status') == 'success':
                    docs = result.get('data', [])
                    for doc in docs:
                        doc['tipo_operacion'] = 'emitidos'
                        doc['company_rut'] = self.full_rut
                        doc['extraction_task_id'] = task_id
                        doc['periodo_tributario'] = periodo
                    all_docs.extend(docs)
            
            logger.info(f"‚úÖ Total documentos de venta extra√≠dos: {len(all_docs)}")
            return all_docs
                
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo documentos de venta per√≠odo {periodo}: {str(e)}")
            return []
    
    def _validate_dates(self, fecha_desde: str, fecha_hasta: str):
        """
        Valida que las fechas sean correctas.
        
        Args:
            fecha_desde: Fecha inicio en formato YYYY-MM-DD
            fecha_hasta: Fecha fin en formato YYYY-MM-DD
            
        Raises:
            ValueError: Si las fechas son inv√°lidas
        """
        try:
            start_date = datetime.strptime(fecha_desde, '%Y-%m-%d').date()
            end_date = datetime.strptime(fecha_hasta, '%Y-%m-%d').date()
            
            if start_date > end_date:
                raise ValueError(f"Fecha desde ({fecha_desde}) no puede ser posterior a fecha hasta ({fecha_hasta})")
            
            # Validar que no sea fecha futura
            if end_date > date.today():
                raise ValueError(f"Fecha hasta ({fecha_hasta}) no puede ser futura")
                
        except ValueError as e:
            if "time data" in str(e):
                raise ValueError(f"Formato de fecha inv√°lido. Use YYYY-MM-DD")
            raise
    
    def _get_fecha_inicio_actividades(self) -> date:
        """
        Obtiene la fecha de inicio de actividades de la empresa.
        
        Returns:
            date: Fecha de inicio de actividades o hace 5 a√±os si no existe
        """
        if hasattr(self.company, 'taxpayer') and self.company.taxpayer:
            if hasattr(self.company.taxpayer, 'fecha_inicio_actividades'):
                if self.company.taxpayer.fecha_inicio_actividades:
                    return self.company.taxpayer.fecha_inicio_actividades
        
        # Si no hay fecha de inicio, usar hace 5 a√±os como m√°ximo
        fecha_default = date.today() - timedelta(days=5*365)
        logger.warning(f"‚ö†Ô∏è No hay fecha de inicio de actividades para {self.full_rut}, usando: {fecha_default}")
        return fecha_default
    
    def _get_periodos_from_dates(self, fecha_desde: str, fecha_hasta: str) -> List[str]:
        """
        Convierte un rango de fechas a lista de per√≠odos tributarios (YYYYMM).
        
        Args:
            fecha_desde: Fecha inicio en formato YYYY-MM-DD
            fecha_hasta: Fecha fin en formato YYYY-MM-DD
            
        Returns:
            Lista de per√≠odos en formato YYYYMM
        """
        try:
            start_date = datetime.strptime(fecha_desde, '%Y-%m-%d').date()
            end_date = datetime.strptime(fecha_hasta, '%Y-%m-%d').date()
            
            periodos = []
            current_date = start_date.replace(day=1)  # Primer d√≠a del mes
            
            while current_date <= end_date:
                periodo = current_date.strftime('%Y%m')
                if periodo not in periodos:
                    periodos.append(periodo)
                
                # Avanzar al pr√≥ximo mes
                if current_date.month == 12:
                    current_date = current_date.replace(year=current_date.year + 1, month=1)
                else:
                    current_date = current_date.replace(month=current_date.month + 1)
            
            return periodos
            
        except ValueError as e:
            logger.error(f"Error parseando fechas {fecha_desde} - {fecha_hasta}: {e}")
            # Fallback: per√≠odo del mes actual
            return [date.today().strftime('%Y%m')]
    
    def _update_sync_progress(self, sync_log: SIISyncLog, current: int, total: int):
        """
        Actualiza el progreso de la sincronizaci√≥n.
        
        Args:
            sync_log: Log de sincronizaci√≥n
            current: Per√≠odo actual
            total: Total de per√≠odos
        """
        try:
            sync_log.refresh_from_db()
            sync_log.progress_percentage = int((current / total) * 100)
            sync_log.save(update_fields=['progress_percentage'])
            logger.info(f"üìä Progreso: {sync_log.progress_percentage}%")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error actualizando progreso: {e}")
    
    def _accumulate_results(self, total_results: Dict, batch_results: Dict):
        """
        Acumula resultados de un lote en los totales.
        
        Args:
            total_results: Resultados totales acumulados
            batch_results: Resultados del lote actual
        """
        total_results['processed'] += batch_results.get('processed', 0)
        total_results['created'] += batch_results.get('created', 0)
        total_results['updated'] += batch_results.get('updated', 0)
        total_results['errors'] += batch_results.get('errors', 0)
        
        # Acumular detalles de errores si existen
        if 'error_details' in batch_results:
            total_results['error_details'].extend(batch_results['error_details'])
    
    def _update_sync_log_results(self, sync_log: SIISyncLog, results: Dict):
        """
        Actualiza el log de sincronizaci√≥n con resultados parciales.
        
        Args:
            sync_log: Log de sincronizaci√≥n
            results: Resultados acumulados
        """
        try:
            sync_log.refresh_from_db()
            sync_log.documents_processed = results['processed']
            sync_log.documents_created = results['created']
            sync_log.documents_updated = results['updated']
            sync_log.errors_count = results['errors']
            sync_log.save(update_fields=[
                'documents_processed',
                'documents_created', 
                'documents_updated',
                'errors_count'
            ])
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error actualizando log de sincronizaci√≥n: {e}")